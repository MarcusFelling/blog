<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>selenium &#8211; Marcus Felling</title>
	<atom:link href="/blog/tag/selenium/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A blog about things I learn at the keyboard: DevOps, CI/CD, Cloud, Automation, to name a few....</description>
	<lastBuildDate>Thu, 30 Mar 2023 20:55:33 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>25 reasons to choose Playwright as your next web testing framework</title>
		<link>/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/</link>
					<comments>/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/#comments</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Wed, 13 Apr 2022 16:44:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[api testing]]></category>
		<category><![CDATA[browser automation]]></category>
		<category><![CDATA[cypress]]></category>
		<category><![CDATA[e2e testing]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[web testing]]></category>
		<guid isPermaLink="false">/?p=1117</guid>

					<description><![CDATA[I wanted a place to capture a list of highlights that make Playwright awesome. Here it is, in no particular order: Did I miss anything? Post your thoughts in the comments&#8230; Happy testing! EDIT: I wanted to add a comment from a former colleague (Adam Bjerstedt), with his list of Playwright favorites, in comparison to &#8230; <a href="/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/" class="more-link">Continue reading <span class="screen-reader-text">25 reasons to choose Playwright as your next web testing framework</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I wanted a place to capture a list of highlights that make Playwright awesome. Here it is, in no particular order:</p>



<span id="more-1117"></span>



<ol class="wp-block-list">
<li>Supports testing scenarios for <a rel="noreferrer noopener" href="https://playwright.dev/docs/pages#multiple-pages" target="_blank">multi-tab</a>, <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-auth#multiple-signed-in-roles" target="_blank">multi-user</a>, multi-origin/domain, and <a rel="noreferrer noopener" href="https://playwright.dev/docs/frames" target="_blank">iframes</a>. <em>&#8220;Playwright is an out-of-process automation driver that is not limited by the scope of in-page JavaScript execution&#8221;</em></li>



<li>Uses the concept of <a rel="noreferrer noopener" href="https://playwright.dev/docs/browser-contexts" target="_blank">browser contexts </a>(equivalent to a brand new browser profile) to run tests in isolation with zero overhead (super fast!).</li>



<li><a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright" target="_blank">VS Code extension</a> has features to run tests with a single click, debug step by step, explore selectors, and record new tests (codegen).</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/release-notes#html-report-update" target="_blank">HTML report</a> to view execution results in your browser. Includes visual diffs, and artifacts like traces, error logs, video recordings, and screenshots. The entire report is a self-contained page that can be <a rel="noreferrer noopener" href="/blog/2021/publishing-playwright-test-results-to-github-pages/" target="_blank">easily hosted anywhere</a>.</li>



<li>Fastest test execution time in <a rel="noreferrer noopener" href="https://rag0g.medium.com/cypress-vs-selenium-vs-playwright-vs-puppeteer-speed-comparison-73fd057c2ae9" target="_blank">Checkly’s benchmarks</a> versus Cypress, Selenium, and Puppeteer.</li>



<li>Built-in <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-snapshots" target="_blank">toMatchScreenshot()</a> to support visual regression testing, with <a rel="noreferrer noopener" href="https://github.com/microsoft/playwright/issues?q=+label%3Afeature-visual-regression-testing+" target="_blank">recent improvements such as disabling animations and masking elements</a>.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/test-parallel" target="_blank">Parallel test execution</a> is supported locally, or remotely for grids such as Selenium Grid. In addition, you can <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-parallel#shard-tests-between-multiple-machines" target="_blank">shard tests between machines</a> to run different tests in parallel e.g. using a <a rel="noreferrer noopener" href="https://docs.github.com/en/github-ae@latest/actions/using-jobs/using-a-build-matrix-for-your-jobs" target="_blank">GitHub Action CI job matrix.</a></li>



<li>Async test code uses standard JavaScript async/await syntax.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/browsers" target="_blank">Cross-browser compatibility</a> for Chromium, Chrome, Microsoft Edge, Firefox, WebKit.</li>



<li>Built and maintained by Microsoft <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2665.png" alt="♥" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Ok, I&#8217;m probably being biased here ?</li>



<li>Multi-language support: <a rel="noreferrer noopener" href="https://playwright.dev/docs/intro" target="_blank">JavaScript, TypeScript</a> (<a href="https://playwright.dev/docs/test-typescript" data-type="URL" data-id="https://playwright.dev/docs/test-typescript">no transpilation required</a>), <a rel="noreferrer noopener" href="https://playwright.dev/dotnet/docs/intro" target="_blank">.NET</a>, <a href="https://playwright.dev/python/docs/intro">Python</a>, <a rel="noreferrer noopener" href="https://playwright.dev/java/docs/intro" target="_blank">Java</a>, and <a rel="noreferrer noopener" href="https://github.com/playwright-community/playwright-go" target="_blank">Go</a> (supported by the community).</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/trace-viewer" target="_blank">Tracing</a> that helps with troubleshooting test runs in a post-mortem manner. This works great to repro failed CI tests.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/auth" target="_blank">Re-use signed-in state</a> so tests can start as a logged-in user, saving time.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/emulation" target="_blank">Emulation</a> for mobile devices, user agents, locales &amp; timezones, permissions, geolocation, and dark/light mode.</li>



<li>Works well with the <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/White-box_testing" target="_blank">white-box testing</a> approach to <a rel="noreferrer noopener" href="https://playwright.dev/docs/selectors#best-practices" target="_blank">prioritize user-facing attributes</a> like text, instead of CSS selectors that can change frequently.</li>



<li>Support for <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-api-testing" target="_blank">API Testing</a>, to do things in your e2e test like set up data or assert things like response code = 200.</li>



<li>Stub and mock network requests with&nbsp;<a href="https://playwright.dev/docs/network">network interception</a>.</li>



<li>Actions have <a rel="noreferrer noopener" href="https://playwright.dev/docs/actionability" target="_blank">auto-waiting built-in</a>, so you don’t need to rely on hard-coded sleep commands that can cause flakiness and slow down tests. Also has <a rel="noreferrer noopener" href="https://playwright.dev/docs/navigations#custom-wait" target="_blank">custom waits</a> such as until an element is visible, or until a pop-up is loaded.</li>



<li>Support for recording user actions as Playwright test code aka <a rel="noreferrer noopener" href="https://playwright.dev/docs/codegen" target="_blank">Test Generator</a>, that can be run via CLI or the <a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright#record-new-tests" target="_blank">record button in VS Code</a>.</li>



<li>Supports device-specific events like <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator#locator-hover" target="_blank">hovering with mouse</a>, <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator#locator-tap" target="_blank">tapping on mobile</a>, and <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator#locator-press" target="_blank">keyboard shortcuts</a>.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/input#upload-files" target="_blank">Upload</a> and <a rel="noreferrer noopener" href="https://playwright.dev/docs/downloads" target="_blank">download</a> files supported out of the box.</li>



<li>The <a rel="noreferrer noopener" href="/blog/2022/create-more-reliable-playwright-tests-with-locators/" target="_blank">magic of Locators</a> eliminates flakiness caused by dynamic controls.</li>



<li>Playwright Test uses the same Expect assertion library as Jest which will be familiar to many JS devs.</li>



<li>Supports <a href="https://playwright.dev/docs/test-annotations#tag-tests">tagging of tests</a> so you can run groups of related tests e.g. `@priority=high`, `@duration=short`.</li>



<li>Provides <a rel="noreferrer noopener" href="https://playwright.dev/docs/docker" target="_blank">docker images</a> that have dependencies and browsers baked in. This makes <a rel="noreferrer noopener" href="https://playwright.dev/docs/ci" target="_blank">CI configuration</a> simple and fast.</li>
</ol>



<p>Did I miss anything? Post your thoughts in the comments&#8230;</p>



<p>Happy testing!</p>



<p><strong>EDIT</strong>: I wanted to add a comment from a former colleague (<a rel="noreferrer noopener" href="https://www.linkedin.com/in/adam-bjerstedt-45536835/" target="_blank">Adam Bjerstedt</a>), with his list of Playwright favorites, in comparison to Selenium:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p><br>1.) Playwright treats locators as a first-class citizen and eliminates stale elements. Selenium finds the pointer to the DOM element and then passes that around; whereas Playwright passes the locator to the action/assertion.<br>2.) Playwright has baked in implicit waits without the problems that Selenium has for negative tests.<br>3.) Playwright allows super powerful frame handling.<br>4.) Playwright has built-in mocking which allows you to write minified e2e tests at the component level (you don&#8217;t even need to use the component testing aspect).<br>5.) Playwright is so fast that we have to manually handle race conditions at times.<br>6.) Playwright supports powerful pseudo-CSS selectors that replace the only use cases for xpath (searching by text and traversing up the DOM). Xpath leads to many terrible habits and should be avoided.<br>7.) Playwright supports automation IDs as a first-class citizen. (Granted I still use them as data attributes so that I can write compound selectors).</p>
</blockquote>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
	</channel>
</rss>
