<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Marcus &#8211; Marcus Felling</title>
	<atom:link href="/blog/author/marcus-fellinggmail-com/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A blog about things I learn at the keyboard: DevOps, CI/CD, Cloud, Automation, to name a few....</description>
	<lastBuildDate>Thu, 09 May 2024 14:11:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.7.1</generator>
	<item>
		<title>Removing Sensitive Data from Git History with BFG and VS Code</title>
		<link>/blog/2024/removing-sensitive-data-from-git-history-with-bfg-and-vs-code/</link>
					<comments>/blog/2024/removing-sensitive-data-from-git-history-with-bfg-and-vs-code/#respond</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Tue, 23 Apr 2024 14:06:19 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1264</guid>

					<description><![CDATA[I was recently notified that an old API key was discovered in one of the repos I own. Even if you remove the sensitive data in a new commit, it can still be found in the Git history. To remove the API key, I decided to use the BFG Repo-Cleaner for cleansing bad data out &#8230; <a href="/blog/2024/removing-sensitive-data-from-git-history-with-bfg-and-vs-code/" class="more-link">Continue reading <span class="screen-reader-text">Removing Sensitive Data from Git History with BFG and VS Code</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I was recently notified that an old API key was discovered in one of the repos I own. Even if you remove the sensitive data in a new commit, it can still be found in the Git history.</p>



<p>To remove the API key, I decided to use the <a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a> for cleansing bad data out of your Git repository history. However, I found myself fumbling around with the BFG CLI and spending way too much time trying to remove the key from the Git history.</p>



<p>That&#8217;s when I realized there had to be a better way. As a frequent user of Visual Studio Code, I thought, &#8220;Why not create a VS Code extension that simplifies this process?&#8221; And that&#8217;s exactly what I did.</p>



<span id="more-1264"></span>



<h2 class="wp-block-heading">Introducing the BFG VS Code Extension</h2>



<p>The <a href="https://marketplace.visualstudio.com/items?itemName=MFelling.bfg-vscode">BFG VS Code Extension</a> is a wrapper for the BFG Repo-Cleaner that makes it easy to remove credentials from your Git history. It guides you through the process step by step using the Command Palette, so you don&#8217;t have to remember complex CLI commands.</p>



<p>Here is how it works:</p>



<ol class="wp-block-list">
<li>Clones a fresh copy of your repo using the &#8211;mirror flag.</li>



<li>Installs BFG: This step downloads the BFG jar file from the official repository and saves it in the workspace folder.</li>



<li>Enter credential to remove: This step prompts the user to enter the credential to remove, writes this credential to a file in the workspace folder, and uses the&nbsp;<code>--replace-text</code>&nbsp;option of BFG Repo-Cleaner to replace this credential with&nbsp;<code>***REMOVED***</code>&nbsp;in the repository&#8217;s history.</li>



<li>Remove credentials: This step runs the BFG Repo-Cleaner with the&nbsp;<code>--replace-text</code>&nbsp;option to replace the specified credential with&nbsp;<code>***REMOVED***</code>&nbsp;in the repository&#8217;s history.</li>



<li>Clean your repository: This step runs the&nbsp;<code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code>&nbsp;command to clean the repository.</li>



<li>Push the changes: This step runs the&nbsp;<code>git push --force</code>&nbsp;command to push the changes to the remote repository</li>
</ol>



<p>The BFG VS Code Extension is a tool I wish I had when I first discovered the old API key in my repo. It would have saved me a lot of time and frustration. I hope it can do the same for you.</p>



<p>You can find the BFG VS Code Extension on the <a href="https://marketplace.visualstudio.com/items?itemName=MFelling.bfg-vscode">VS Code Marketplace</a> and the source code on <a href="https://github.com/MarcusFelling/bfg-vscode">GitHub</a>. If you have any questions or feedback, feel free to open an issue on GitHub.</p>



<p>The best way to prevent sensitive data from being exposed in your Git history is to never commit it in the first place. Always use environment variables or configuration files that are ignored by Git to store sensitive data. But if you do accidentally commit sensitive data, the BFG VS Code Extension is here to help you clean it up!</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2024/removing-sensitive-data-from-git-history-with-bfg-and-vs-code/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using Azure Test Plans with Playwright</title>
		<link>/blog/2023/using-azure-test-plans-with-playwright/</link>
					<comments>/blog/2023/using-azure-test-plans-with-playwright/#comments</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Sun, 17 Sep 2023 21:01:58 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1237</guid>

					<description><![CDATA[In 2020, I blogged about associating automated tests with Azure Test Cases. The post had 18 questions, which indicates there is still confusion on how this works, especially how to set it up with Playwright (which was pre-stable release at the time). In this post, I&#8217;ll walk through how to configure both Playwright Test (JavaScript/TypeScript) &#8230; <a href="/blog/2023/using-azure-test-plans-with-playwright/" class="more-link">Continue reading <span class="screen-reader-text">Using Azure Test Plans with Playwright</span></a>]]></description>
										<content:encoded><![CDATA[
<p>In 2020, I blogged about associating<a rel="noreferrer noopener" href="/blog/2020/associating-automated-tests-with-azure-test-cases/" data-type="link" data-id="/blog/2020/associating-automated-tests-with-azure-test-cases/" target="_blank"> automated tests with Azure Test Cases</a>. The post had 18 questions, which indicates there is still confusion on how this works, especially how to set it up with Playwright (which was pre-stable release at the time).</p>



<p>In this post, I&#8217;ll walk through how to configure both Playwright Test (JavaScript/TypeScript) and Playwright .NET to get test results in Azure Test Plans. Each option uses abstractions built on the Azure DevOps <a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/test/?view=azure-devops-rest-5.0" target="_blank" rel="noreferrer noopener">REST API</a> so you don&#8217;t have to write additional code to accomplish this.</p>



<span id="more-1237"></span>



<h2 class="wp-block-heading">Why?</h2>



<p>Azure Test Plans is a popular service that many teams are using for manual testing. By publishing your automated Playwright tests to the service, you get a couple of benefits:</p>



<ol class="wp-block-list">
<li><strong>Traceability</strong>. This gives you the option to link your requirements (Azure Boards) to automated tests and the pipeline that ran them. By mapping the two, you can establish the quality of the requirements based on test results.&nbsp;Ideally, a test case is created for each of the acceptance criteria listed for the requirement.</li>



<li><strong>History</strong>. Drilling into every pipeline run to see test results over time is a pain. Azure Test Plans allows you to see results through features like the <a rel="noreferrer noopener" href="https://learn.microsoft.com/en-us/azure/devops/test/progress-report?view=azure-devops" data-type="link" data-id="https://learn.microsoft.com/en-us/azure/devops/test/progress-report?view=azure-devops" target="_blank">progress report</a> and <a rel="noreferrer noopener" href="https://learn.microsoft.com/en-us/azure/devops/test/track-test-status?view=azure-devops#track-testing-progress" data-type="link" data-id="https://learn.microsoft.com/en-us/azure/devops/test/track-test-status?view=azure-devops#track-testing-progress" target="_blank">charts</a>.</li>



<li><strong>Test inventory. </strong>By tracking automated AND manual test cases, you can do things like <a rel="noreferrer noopener" href="https://learn.microsoft.com/en-us/azure/devops/test/track-test-status?view=azure-devops#track-test-case-status" data-type="link" data-id="https://learn.microsoft.com/en-us/azure/devops/test/track-test-status?view=azure-devops#track-test-case-status" target="_blank">track the status of a test case</a> (not automated, planned to be automated, or automated). This makes it easy to track the progress of automated testing efforts, e.g. how many manual tests have been converted to automated, how many remain, etc.</li>
</ol>



<h2 class="wp-block-heading">What are the options?</h2>



<p>I&#8217;ll show working code examples for both Playwright Test (TypeScript) and Playwright .NET using NUnit. If you&#8217;re already sick of reading and want to see them in action, here are some links.</p>



<p><strong>TypeScript:</strong> <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_git/PlaywrightTest?path=/tests" target="_blank">tests</a>, <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_build?definitionId=24" target="_blank">pipeline to run tests</a>, <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_testPlans/execute?planId=442&amp;suiteId=443" target="_blank">test plan</a></p>



<p><strong>.NET</strong>: <a href="https://dev.azure.com/marcusfelling/Playground/_git/PlaywrightDotnet?path=/PlaywrightTests/Header.cs" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_git/PlaywrightDotnet?path=/PlaywrightTests" target="_blank" rel="noreferrer noopener">tests</a>, <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_build?definitionId=24" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_build?definitionId=24" target="_blank">build to publish binaries</a>, <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_release?_a=releases&amp;view=mine&amp;definitionId=2" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_release?_a=releases&amp;view=mine&amp;definitionId=2" target="_blank">release to run tests</a>, <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_testPlans/execute?planId=432&amp;suiteId=433" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_testPlans/execute?planId=432&amp;suiteId=433" target="_blank">test plan</a></p>



<h2 class="wp-block-heading">Playwright Test (TypeScript)</h2>



<p><a rel="noreferrer noopener" href="https://www.npmjs.com/package/@alex_neo/playwright-azure-reporter" data-type="link" data-id="https://www.npmjs.com/package/@alex_neo/playwright-azure-reporter" target="_blank">playwright-azure-reporter</a> is a custom reporter (npm package) that allows you to post test results by annotating your test case name with the Azure test plan ID. The README has instructions for installing the package and adding the reporter to <code>playwright.config.ts</code></p>



<p>My example project&#8217;s config looks like this: <a href="https://gist.github.com/MarcusFelling/66356db19ecb20ff798150ddd91900da" data-type="link" data-id="playwright.config.ts" target="_blank" rel="noreferrer noopener">playwright</a><a href="https://dev.azure.com/marcusfelling/Playground/_git/PlaywrightTest?path=/playwright.config.ts&amp;version=GBmain&amp;line=31&amp;lineEnd=32&amp;lineStartColumn=1&amp;lineEndColumn=1&amp;lineStyle=plain&amp;_a=contents" data-type="link" data-id="playwright.config.ts" target="_blank" rel="noreferrer noopener">.config.ts</a>.</p>



<p>Once that is in place:</p>



<ol class="wp-block-list">
<li>Manually create new test cases in Azure Test Plans taking note of the ID (planID in query string of URL)</li>



<li>Add the ID in brackets to the test case title. 444, 445 in this example:</li>
</ol>



<figure class="wp-block-image size-large"><a href="/content/uploads/2023/09/annotation-test-id.png"><img fetchpriority="high" decoding="async" width="1024" height="329" src="/content/uploads/2023/09/annotation-test-id-1024x329.png" alt="" class="wp-image-1243" srcset="/content/uploads/2023/09/annotation-test-id-1024x329.png 1024w, /content/uploads/2023/09/annotation-test-id-300x96.png 300w, /content/uploads/2023/09/annotation-test-id-768x247.png 768w, /content/uploads/2023/09/annotation-test-id-648x208.png 648w, /content/uploads/2023/09/annotation-test-id-583x187.png 583w, /content/uploads/2023/09/annotation-test-id.png 1036w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>When these tests get run, you will then be able to see the outcome for each test case:</p>



<figure class="wp-block-image size-large"><a href="/content/uploads/2023/09/outcome.png"><img decoding="async" width="1024" height="388" src="/content/uploads/2023/09/outcome-1024x388.png" alt="" class="wp-image-1244" srcset="/content/uploads/2023/09/outcome-1024x388.png 1024w, /content/uploads/2023/09/outcome-300x114.png 300w, /content/uploads/2023/09/outcome-768x291.png 768w, /content/uploads/2023/09/outcome-648x245.png 648w, /content/uploads/2023/09/outcome-507x192.png 507w, /content/uploads/2023/09/outcome.png 1141w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>My example pipeline runs these tests for every commit on main and also uses the JUnit reporter to publish results to the pipeline&#8217;s Test tab:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/09/test-tab.png"><img decoding="async" width="951" height="683" src="/content/uploads/2023/09/test-tab.png" alt="" class="wp-image-1245" srcset="/content/uploads/2023/09/test-tab.png 951w, /content/uploads/2023/09/test-tab-300x215.png 300w, /content/uploads/2023/09/test-tab-768x552.png 768w, /content/uploads/2023/09/test-tab-648x465.png 648w, /content/uploads/2023/09/test-tab-267x192.png 267w" sizes="(max-width: 951px) 100vw, 951px" /></a></figure>



<h2 class="wp-block-heading">Playwright .NET</h2>



<p>This option works out of the box but has some caveats and complexity: A Windows runner and a release pipeline are required to use the Visual Studio test platform installer and Visual Studio Test tasks. Also, Visual Studio must be used to associate test cases.</p>



<p>Here is how I set this up in my example project:</p>



<ol class="wp-block-list">
<li>Manually create new Azure Test Plans test cases</li>



<li>Use Visual Studio&#8217;s test explorer to associate the automated test cases:</li>
</ol>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/09/associate-test-case.png"><img loading="lazy" decoding="async" width="396" height="437" src="/content/uploads/2023/09/associate-test-case.png" alt="" class="wp-image-1251" srcset="/content/uploads/2023/09/associate-test-case.png 396w, /content/uploads/2023/09/associate-test-case-272x300.png 272w, /content/uploads/2023/09/associate-test-case-174x192.png 174w" sizes="auto, (max-width: 396px) 100vw, 396px" /></a></figure>



<p>This will change the Automation status field on the test case work item to automated:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/09/automation-status.png"><img loading="lazy" decoding="async" width="913" height="449" src="/content/uploads/2023/09/automation-status.png" alt="" class="wp-image-1252" srcset="/content/uploads/2023/09/automation-status.png 913w, /content/uploads/2023/09/automation-status-300x148.png 300w, /content/uploads/2023/09/automation-status-768x378.png 768w, /content/uploads/2023/09/automation-status-648x319.png 648w, /content/uploads/2023/09/automation-status-390x192.png 390w" sizes="auto, (max-width: 913px) 100vw, 913px" /></a></figure>



<p><br>Once the test cases are configured, we can set up our pipelines to run the tests.</p>



<ol class="wp-block-list">
<li>Create a build pipeline that runs <code>dotnet publish</code> (using Windows agent) in order to create an artifact with the Playright binaries: <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_git/PlaywrightDotnet?path=/playwright-dotnet.yml" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_git/PlaywrightDotnet?path=/playwright-dotnet.yml" target="_blank">playwright-dotnet.yml</a></li>



<li>Create a <a href="https://dev.azure.com/marcusfelling/Playground/_releaseDefinition?definitionId=2&amp;_a=definition-tasks&amp;environmentId=4" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_releaseDefinition?definitionId=2&amp;_a=definition-tasks&amp;environmentId=4" target="_blank" rel="noreferrer noopener">release pipeline</a> referencing the artifact created in the previous step:</li>
</ol>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/09/artifact.png"><img loading="lazy" decoding="async" width="987" height="652" src="/content/uploads/2023/09/artifact.png" alt="" class="wp-image-1247" srcset="/content/uploads/2023/09/artifact.png 987w, /content/uploads/2023/09/artifact-300x198.png 300w, /content/uploads/2023/09/artifact-768x507.png 768w, /content/uploads/2023/09/artifact-648x428.png 648w, /content/uploads/2023/09/artifact-291x192.png 291w" sizes="auto, (max-width: 987px) 100vw, 987px" /></a></figure>



<p>3. Add install tasks (that run on Windows agent) for &#8220;Visual Studio Test Platform Installer&#8221; (prereq for VS Test task), .NET, and Playwright browsers:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/09/tasks.png"><img loading="lazy" decoding="async" width="867" height="485" src="/content/uploads/2023/09/tasks.png" alt="" class="wp-image-1248" srcset="/content/uploads/2023/09/tasks.png 867w, /content/uploads/2023/09/tasks-300x168.png 300w, /content/uploads/2023/09/tasks-768x430.png 768w, /content/uploads/2023/09/tasks-648x362.png 648w, /content/uploads/2023/09/tasks-343x192.png 343w" sizes="auto, (max-width: 867px) 100vw, 867px" /></a></figure>



<p>4. Add the VS Test task and reference your test plan:</p>



<figure class="wp-block-image size-full is-resized"><a href="/content/uploads/2023/09/vstest-task.png"><img loading="lazy" decoding="async" width="314" height="633" src="/content/uploads/2023/09/vstest-task.png" alt="" class="wp-image-1249" style="width:314px;height:634px" srcset="/content/uploads/2023/09/vstest-task.png 314w, /content/uploads/2023/09/vstest-task-149x300.png 149w, /content/uploads/2023/09/vstest-task-95x192.png 95w" sizes="auto, (max-width: 314px) 100vw, 314px" /></a></figure>



<p>5. Create a new release to run the tests. Example results: <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_releaseProgress?_a=release-environment-extension&amp;releaseId=12&amp;environmentId=12&amp;extensionId=ms.vss-test-web.test-result-in-release-environment-editor-tab" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_releaseProgress?_a=release-environment-extension&amp;releaseId=12&amp;environmentId=12&amp;extensionId=ms.vss-test-web.test-result-in-release-environment-editor-tab" target="_blank">Test tab</a>, <a rel="noreferrer noopener" href="https://dev.azure.com/marcusfelling/Playground/_testPlans/_results?testCaseId=434&amp;contextPointId=31" data-type="link" data-id="https://dev.azure.com/marcusfelling/Playground/_testPlans/_results?testCaseId=434&amp;contextPointId=31" target="_blank">test plan results</a>.</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/09/test-case-results.png"><img loading="lazy" decoding="async" width="873" height="497" src="/content/uploads/2023/09/test-case-results.png" alt="" class="wp-image-1250" srcset="/content/uploads/2023/09/test-case-results.png 873w, /content/uploads/2023/09/test-case-results-300x171.png 300w, /content/uploads/2023/09/test-case-results-768x437.png 768w, /content/uploads/2023/09/test-case-results-648x369.png 648w, /content/uploads/2023/09/test-case-results-337x192.png 337w" sizes="auto, (max-width: 873px) 100vw, 873px" /></a></figure>



<h2 class="wp-block-heading">Summary</h2>



<p>Hopefully, you were able to follow my examples to get this set up in your own environment. I&#8217;d love to hear feedback on anything I may have missed, new features you&#8217;d like to see from the product team at Microsoft, or interesting use cases you have experience with.</p>



<p>Happy testing,</p>



<p>Marcus</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2023/using-azure-test-plans-with-playwright/feed/</wfw:commentRss>
			<slash:comments>18</slash:comments>
		
		
			</item>
		<item>
		<title>Measuring Website Performance with Playwright Test and Navigation Timing API</title>
		<link>/blog/2023/measuring-website-performance-with-playwright-test-and-navigation-timing-api/</link>
					<comments>/blog/2023/measuring-website-performance-with-playwright-test-and-navigation-timing-api/#respond</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Thu, 27 Apr 2023 14:40:19 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1216</guid>

					<description><![CDATA[I was recently tasked with measuring the impact of a Redis cache on an e-commerce site. This was pretty simple with Azure Load Testing, by comparing the results of 2 sites, one with cache, and one without. However, to better exercise the site and understand the user experience, I wanted also to use Playwright. Playwright &#8230; <a href="/blog/2023/measuring-website-performance-with-playwright-test-and-navigation-timing-api/" class="more-link">Continue reading <span class="screen-reader-text">Measuring Website Performance with Playwright Test and Navigation Timing API</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I was recently tasked with measuring the impact of a Redis cache on an e-commerce site. This was pretty simple with <a href="https://azure.microsoft.com/en-us/products/load-testing/" target="_blank" rel="noreferrer noopener">Azure Load Testing</a>, by comparing the results of 2 sites, one with cache, and one without. However, to better exercise the site and understand the user experience, I wanted also to use Playwright.</p>



<span id="more-1216"></span>



<p>Playwright already has useful features built in to report on things like the HTML report test step timing and the trace viewer that includes the call duration of each action.</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/04/test-step-example.png"><img loading="lazy" decoding="async" width="747" height="253" src="/content/uploads/2023/04/test-step-example.png" alt="" class="wp-image-1217" srcset="/content/uploads/2023/04/test-step-example.png 747w, /content/uploads/2023/04/test-step-example-300x102.png 300w, /content/uploads/2023/04/test-step-example-648x219.png 648w, /content/uploads/2023/04/test-step-example-567x192.png 567w" sizes="auto, (max-width: 747px) 100vw, 747px" /></a><figcaption class="wp-element-caption">HTML report test step duration</figcaption></figure>



<p>I wanted to take this a step further by using the Navigation Timing API, measuring start to loadEventEnd. All of the examples I found online used <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing" target="_blank" rel="noreferrer noopener">performance.timing</a>, which is now deprecated. This is a very simple code snippet, but posting this will hopefully help others find a solution faster.</p>



<p>Here we have a function <strong>measurePerformance </strong>that can be called inside any test case to get navigation start to load event end times. This could easily be wrapped in a conditional to fail the test based on times. In my case, I just wanted it to be surfaced in the HTML report as a custom annotation to compare between sites, by toggling baseURL.</p>



<script src="https://gist.github.com/MarcusFelling/88f8ddde9941ec1cef19667892dbe2d0.js"></script>



<p>As a result, this is what the HTML report looks like:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/04/performance-playwright-html-report.png"><img loading="lazy" decoding="async" width="996" height="118" src="/content/uploads/2023/04/performance-playwright-html-report.png" alt="" class="wp-image-1218" srcset="/content/uploads/2023/04/performance-playwright-html-report.png 996w, /content/uploads/2023/04/performance-playwright-html-report-300x36.png 300w, /content/uploads/2023/04/performance-playwright-html-report-768x91.png 768w, /content/uploads/2023/04/performance-playwright-html-report-648x77.png 648w, /content/uploads/2023/04/performance-playwright-html-report-583x69.png 583w" sizes="auto, (max-width: 996px) 100vw, 996px" /></a></figure>



<p>Happy testing!</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2023/measuring-website-performance-with-playwright-test-and-navigation-timing-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>6 Nifty GitHub Actions Features 🚀</title>
		<link>/blog/2023/6-nifty-github-actions-features/</link>
					<comments>/blog/2023/6-nifty-github-actions-features/#respond</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Wed, 08 Mar 2023 19:23:17 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1197</guid>

					<description><![CDATA[I&#8217;ve been having a lot of fun with GitHub Actions lately and wanted to document some of the features I regularly use, including some tips and tricks. 1. Create separate environments for development, staging, and production GitHub Actions has an environments feature to describe a deployment target such as dev, staging, or production. By referencing &#8230; <a href="/blog/2023/6-nifty-github-actions-features/" class="more-link">Continue reading <span class="screen-reader-text">6 Nifty GitHub Actions Features 🚀</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I&#8217;ve been having a lot of fun with GitHub Actions lately and wanted to document some of the features I regularly use, including some tips and tricks.</p>



<span id="more-1197"></span>



<h2 class="wp-block-heading">1. Create separate environments for development, staging, and production</h2>



<p>GitHub Actions has an <a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment">environments feature</a> to describe a deployment target such as dev, staging, or production. By referencing the environment in a job, you can take advantage of <a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#environment-protection-rules">protection rules</a> and/or <a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#environment-secrets">secrets</a> that get scoped to the environment. Some potential use cases include requiring a particular person or team to approve workflow jobs that reference an environment (e.g. manual approval before production deploy), or limiting which branches can deploy to a particular environment. I also like to set the environment URL so it’s easily accessible from the summary page:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/03/image.png"><img loading="lazy" decoding="async" width="696" height="96" src="/content/uploads/2023/03/image.png" alt="" class="wp-image-1199" srcset="/content/uploads/2023/03/image.png 696w, /content/uploads/2023/03/image-300x41.png 300w, /content/uploads/2023/03/image-648x89.png 648w, /content/uploads/2023/03/image-583x80.png 583w" sizes="auto, (max-width: 696px) 100vw, 696px" /></a></figure>



<h2 class="wp-block-heading">2. Establish workflow breakpoints with dependencies</h2>



<p>By default, GitHub Actions runs multiple commands simultaneously. However, you can utilize the <code>needs</code> keyword to <a href="https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#creating-dependent-jobs">create dependencies between jobs</a>, meaning that if a job fails (e.g. tests), dependent jobs won&#8217;t run. This also helps you control jobs which jobs run in parallel; if there aren’t dependencies between steps, break them out into separate jobs, then set their `needs` to the next step in the process.</p>



<p>e.g. my app, database, and infra as code projects can be built at the same time before deploying to dev:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/03/image-1.png"><img loading="lazy" decoding="async" width="486" height="157" src="/content/uploads/2023/03/image-1.png" alt="" class="wp-image-1200" srcset="/content/uploads/2023/03/image-1.png 486w, /content/uploads/2023/03/image-1-300x97.png 300w" sizes="auto, (max-width: 486px) 100vw, 486px" /></a></figure>



<h2 class="wp-block-heading">3. Use secrets to store sensitive workflow data</h2>



<p>GitHub&#8217;s secrets allow you to securely store sensitive data, including passwords, tokens, certificates, etc. You can directly reference secrets in workflows, meaning that you can create and share workflows with colleagues that employ secrets for secure values without hardcoding them directly into YAML workflow files. I like to scope the secrets close to the steps that require them. For example, rather than setting a secret for the entire workflow to access, it can be set for the job that contains steps that reference the secret.</p>



<p>e.g. Only the Playwright test job needs to reference AzureAD creds:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/03/image-2.png"><img loading="lazy" decoding="async" width="460" height="145" src="/content/uploads/2023/03/image-2.png" alt="" class="wp-image-1201" srcset="/content/uploads/2023/03/image-2.png 460w, /content/uploads/2023/03/image-2-300x95.png 300w" sizes="auto, (max-width: 460px) 100vw, 460px" /></a></figure>



<h2 class="wp-block-heading">4. Conditionals can aid in differences between environments</h2>



<p>GitHub Actions allows you to use conditionals that employ the &#8220;if&#8221; keyword to decide whether a step should run. You can use this feature to develop dependencies so that if a dependent job fails, the workflow can continue running. You can also use specific built-in functions for data operations, as well as leverage status check functions to determine whether preceding steps have succeeded, failed, canceled, or disrupted. Moreover, you can use conditionals to share workflow data among different branches and forks, with steps tailored to different triggers or environments. The conditions can also be set in reusable workflows to toggle different steps between environments:</p>



<p>e.g. I want reusable workflows to be uniform across environments, with the exception of steps that are only based on environmentName conditionals:</p>



<script src=https://gist.github.com/MarcusFelling/a24904731e73dd9b2bddeade2c459948.js></script>



<h2 class="wp-block-heading">5. Share data between jobs to aid in “build once, deploy many”</h2>



<p>GitHub Actions enables you to share data between jobs in any workflow as <a href="https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts" target="_blank" rel="noreferrer noopener">artifacts</a>, which are linked to the workflow run where they are produced. This can help simplify the creation of workflows and facilitate the development of more complex automation where one workflow informs another via dependencies or conditionals. This also helps enable the mantra “build once, deploy many”. In other words, build projects in an environment-agnostic fashion, upload them as artifacts, then all deployment jobs use the same set of artifacts across environments.</p>



<h2 class="wp-block-heading">6. Use contexts to access workflow information</h2>



<p><a rel="noreferrer noopener" href="https://docs.github.com/en/actions/learn-github-actions/contexts" target="_blank">Contexts </a>represent a group of variables that can access details about workflow runs, runner environments, jobs, and steps to help derive key information about workflow operations. Contexts use expression syntax such as ${{ }}, and you can use most of them at any point in the workflow. I like to dump the entire context at the beginning of jobs to aid in troubleshooting:</p>



<script src=https://gist.github.com/MarcusFelling/01d9e6ed08b3677b9aad5adb3a624aca.js></script>



<h2 class="wp-block-heading">Wrapping up</h2>



<p>I&#8217;m curious to learn about other ways folks are leveraging GitHub Actions features. Add a comment to this post with any tips or tricks you&#8217;ve used with GitHub Actions!</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2023/6-nifty-github-actions-features/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Handling Azure AD/Entra ID Authentication with Playwright</title>
		<link>/blog/2023/handling-azure-ad-authentication-with-playwright/</link>
					<comments>/blog/2023/handling-azure-ad-authentication-with-playwright/#respond</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Tue, 21 Feb 2023 19:29:38 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1178</guid>

					<description><![CDATA[One of the most frequently asked questions I get is how to test web apps that use Azure AD/Entra ID. Rather than repeating myself, I figured I&#8217;d write a blog post to expand on the official docs. NOTE: the creepy feature image for this post was generated via DALL-E? Environment Variables Storing secrets in plain &#8230; <a href="/blog/2023/handling-azure-ad-authentication-with-playwright/" class="more-link">Continue reading <span class="screen-reader-text">Handling Azure AD/Entra ID Authentication with Playwright</span></a>]]></description>
										<content:encoded><![CDATA[
<p>One of the most frequently asked questions I get is how to test web apps that use Azure AD/Entra ID. Rather than repeating myself, I figured I&#8217;d write a blog post to expand on the <a rel="noreferrer noopener" href="https://playwright.dev/docs/auth" target="_blank">official docs</a>. </p>



<p><em>NOTE: the creepy feature image for this post was generated via <a rel="noreferrer noopener" href="https://openai.com/dall-e-2/" target="_blank">DALL-E</a>?</em></p>



<span id="more-1178"></span>



<h2 class="wp-block-heading">Environment Variables</h2>



<p>Storing secrets in plain text in our code or configuration files can pose a significant security risk, especially if we share our code with others or publish it on public repositories like GitHub. Instead, we can store the credentials of our test accounts using environment variables. The environment variables are then referenced in our tests using the process core module of Node.js:</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/02/process-node-core-module.png"><img loading="lazy" decoding="async" width="598" height="128" src="/content/uploads/2023/02/process-node-core-module.png" alt="" class="wp-image-1182" srcset="/content/uploads/2023/02/process-node-core-module.png 598w, /content/uploads/2023/02/process-node-core-module-300x64.png 300w, /content/uploads/2023/02/process-node-core-module-583x125.png 583w" sizes="auto, (max-width: 598px) 100vw, 598px" /></a></figure>



<p><br>To set the values of these variables we can use our CI system&#8217;s secret management. For GitHub Actions, setting the values in the pipeline would look something like this:</p>



<figure class="wp-block-image size-full is-resized"><a href="/content/uploads/2023/02/gha-secrets-playwright.png"><img loading="lazy" decoding="async" src="/content/uploads/2023/02/gha-secrets-playwright.png" alt="" class="wp-image-1183" style="width:502px;height:158px" width="502" height="158" srcset="/content/uploads/2023/02/gha-secrets-playwright.png 744w, /content/uploads/2023/02/gha-secrets-playwright-300x94.png 300w, /content/uploads/2023/02/gha-secrets-playwright-648x204.png 648w, /content/uploads/2023/02/gha-secrets-playwright-583x183.png 583w" sizes="auto, (max-width: 502px) 100vw, 502px" /></a><figcaption class="wp-element-caption"><em>example GitHub Actions workflow setting env vars scoped to job</em></figcaption></figure>



<p><br>To make local development easier, we can use <a href="https://github.com/motdotla/dotenv">.env files</a> that are added to .gitignore to make sure they don&#8217;t get committed to source control.</p>



<figure class="wp-block-image size-full"><a href="/content/uploads/2023/02/example-dotenv-file.png"><img loading="lazy" decoding="async" width="162" height="118" src="/content/uploads/2023/02/example-dotenv-file.png" alt="" class="wp-image-1184"/></a><figcaption class="wp-element-caption"><em>example .env file with key-value pairs</em></figcaption></figure>



<h2 class="wp-block-heading">Tips</h2>



<ul class="wp-block-list">
<li>As a starting point, use <a href="https://playwright.dev/docs/codegen-intro">codegen</a> to walk through logging in, then refactor.</li>



<li>Create a new tenant for testing and turn off MFA and security defaults. MFA cannot be fully automated and requires manual intervention.</li>



<li>Optionally, set <a rel="noreferrer noopener" href="https://learn.microsoft.com/en-us/azure/active-directory/conditional-access/overview" target="_blank">conditional access policies</a> on your test environment to bypass login, then have a separate environment and tests for the login scenario itself.</li>



<li>The test account will need to be granted permission to the app under test for the first time. You can either add conditionals to your test script (if X locator is present, then click Yes) to account for this or manually log in once to grant permissions.<br><em>e.g. this is a one-time step</em><br><img loading="lazy" decoding="async" width="300" height="311" class="wp-image-1179" style="width: 300px;" src="/content/uploads/2023/02/aad-app-permissions.jpg" alt="Azure AD App Permissions for login auth" srcset="/content/uploads/2023/02/aad-app-permissions.jpg 453w, /content/uploads/2023/02/aad-app-permissions-289x300.jpg 289w, /content/uploads/2023/02/aad-app-permissions-185x192.jpg 185w" sizes="auto, (max-width: 300px) 100vw, 300px" /></li>
</ul>



<script src="https://gist.github.com/MarcusFelling/b28e64cc083aac32311ba5721deee14f.js"></script>



<ul class="wp-block-list">
<li>Auth can be set up to run at various stages of test execution. <s>If all of your tests require auth, I’d recommend logging in once and re-using the signed-in state via <a href="https://playwright.dev/docs/auth#reuse-signed-in-state">global setup</a>. If only a subset of tests requires auth, you can use a <a href="https://playwright.dev/docs/auth#reuse-the-signed-in-page-in-multiple-tests">beforeAll hook</a> or <a href="https://playwright.dev/docs/test-fixtures">fixture</a>.</s><br><strong>**EDIT**: </strong>As of 1.31, Playwright now has <a rel="noreferrer noopener" href="https://playwright.dev/docs/release-notes#new-apis" data-type="URL" data-id="https://playwright.dev/docs/release-notes#new-apis" target="_blank">test project dependencies</a>, which allows you to perform setup in a more advantageous approach compared to a global setup script (e.g. produce traces and HTML report). Docs now have example scripts to walk through this: <a href="https://playwright.dev/docs/auth#basic-shared-account-in-all-tests" target="_blank" rel="noreferrer noopener">https://playwright.dev/docs/auth#basic-shared-account-in-all-tests</a></li>
</ul>



<h2 class="wp-block-heading">Example setup </h2>



<p>Create auth.setup.ts</p>



<script src="https://gist.github.com/MarcusFelling/ac5486defbafd734ee23783859658c13.js"></script>



<p>Update playwright.config.ts with project dependencies, so the script above gets run before tests that need to be authenticated:</p>



<script src="https://gist.github.com/MarcusFelling/dbb6b893676b181ed849308bed707fbc.js"></script>



<p>When the tests get run, the following will happen:</p>



<ol class="wp-block-list">
<li>auth.setup.ts logs into AAD/Entra ID using creds from env variables</li>



<li>the signed-in state is saved to file storageState.json</li>



<li>the browser context for all of the test cases is created using the already logged-in state via storageState.json</li>
</ol>



<p>With this setup, we reduce the test execution time by only logging in once, rather than in every individual test case.</p>



<h2 class="wp-block-heading">Wrapping up</h2>



<p>I&#8217;m curious to learn about other ways that people are handling AAD/Entra ID authentication in their Playwright tests. If you have experience with this, I&#8217;d love to hear about the challenges you faced and the solutions you came up with. Your insights could be valuable to others who are also working on Playwright test automation and facing similar issues.</p>



<p>Happy testing!</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2023/handling-azure-ad-authentication-with-playwright/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>25 reasons to choose Playwright as your next web testing framework</title>
		<link>/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/</link>
					<comments>/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/#comments</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Wed, 13 Apr 2022 16:44:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[api testing]]></category>
		<category><![CDATA[browser automation]]></category>
		<category><![CDATA[cypress]]></category>
		<category><![CDATA[e2e testing]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[web testing]]></category>
		<guid isPermaLink="false">/?p=1117</guid>

					<description><![CDATA[I wanted a place to capture a list of highlights that make Playwright awesome. Here it is, in no particular order: Did I miss anything? Post your thoughts in the comments&#8230; Happy testing! EDIT: I wanted to add a comment from a former colleague (Adam Bjerstedt), with his list of Playwright favorites, in comparison to &#8230; <a href="/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/" class="more-link">Continue reading <span class="screen-reader-text">25 reasons to choose Playwright as your next web testing framework</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I wanted a place to capture a list of highlights that make Playwright awesome. Here it is, in no particular order:</p>



<span id="more-1117"></span>



<ol class="wp-block-list">
<li>Supports testing scenarios for <a rel="noreferrer noopener" href="https://playwright.dev/docs/pages#multiple-pages" target="_blank">multi-tab</a>, <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-auth#multiple-signed-in-roles" target="_blank">multi-user</a>, multi-origin/domain, and <a rel="noreferrer noopener" href="https://playwright.dev/docs/frames" target="_blank">iframes</a>. <em>&#8220;Playwright is an out-of-process automation driver that is not limited by the scope of in-page JavaScript execution&#8221;</em></li>



<li>Uses the concept of <a rel="noreferrer noopener" href="https://playwright.dev/docs/browser-contexts" target="_blank">browser contexts </a>(equivalent to a brand new browser profile) to run tests in isolation with zero overhead (super fast!).</li>



<li><a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright" target="_blank">VS Code extension</a> has features to run tests with a single click, debug step by step, explore selectors, and record new tests (codegen).</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/release-notes#html-report-update" target="_blank">HTML report</a> to view execution results in your browser. Includes visual diffs, and artifacts like traces, error logs, video recordings, and screenshots. The entire report is a self-contained page that can be <a rel="noreferrer noopener" href="/blog/2021/publishing-playwright-test-results-to-github-pages/" target="_blank">easily hosted anywhere</a>.</li>



<li>Fastest test execution time in <a rel="noreferrer noopener" href="https://rag0g.medium.com/cypress-vs-selenium-vs-playwright-vs-puppeteer-speed-comparison-73fd057c2ae9" target="_blank">Checkly’s benchmarks</a> versus Cypress, Selenium, and Puppeteer.</li>



<li>Built-in <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-snapshots" target="_blank">toMatchScreenshot()</a> to support visual regression testing, with <a rel="noreferrer noopener" href="https://github.com/microsoft/playwright/issues?q=+label%3Afeature-visual-regression-testing+" target="_blank">recent improvements such as disabling animations and masking elements</a>.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/test-parallel" target="_blank">Parallel test execution</a> is supported locally, or remotely for grids such as Selenium Grid. In addition, you can <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-parallel#shard-tests-between-multiple-machines" target="_blank">shard tests between machines</a> to run different tests in parallel e.g. using a <a rel="noreferrer noopener" href="https://docs.github.com/en/github-ae@latest/actions/using-jobs/using-a-build-matrix-for-your-jobs" target="_blank">GitHub Action CI job matrix.</a></li>



<li>Async test code uses standard JavaScript async/await syntax.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/browsers" target="_blank">Cross-browser compatibility</a> for Chromium, Chrome, Microsoft Edge, Firefox, WebKit.</li>



<li>Built and maintained by Microsoft <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2665.png" alt="♥" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Ok, I&#8217;m probably being biased here ?</li>



<li>Multi-language support: <a rel="noreferrer noopener" href="https://playwright.dev/docs/intro" target="_blank">JavaScript, TypeScript</a> (<a href="https://playwright.dev/docs/test-typescript" data-type="URL" data-id="https://playwright.dev/docs/test-typescript">no transpilation required</a>), <a rel="noreferrer noopener" href="https://playwright.dev/dotnet/docs/intro" target="_blank">.NET</a>, <a href="https://playwright.dev/python/docs/intro">Python</a>, <a rel="noreferrer noopener" href="https://playwright.dev/java/docs/intro" target="_blank">Java</a>, and <a rel="noreferrer noopener" href="https://github.com/playwright-community/playwright-go" target="_blank">Go</a> (supported by the community).</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/trace-viewer" target="_blank">Tracing</a> that helps with troubleshooting test runs in a post-mortem manner. This works great to repro failed CI tests.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/auth" target="_blank">Re-use signed-in state</a> so tests can start as a logged-in user, saving time.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/emulation" target="_blank">Emulation</a> for mobile devices, user agents, locales &amp; timezones, permissions, geolocation, and dark/light mode.</li>



<li>Works well with the <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/White-box_testing" target="_blank">white-box testing</a> approach to <a rel="noreferrer noopener" href="https://playwright.dev/docs/selectors#best-practices" target="_blank">prioritize user-facing attributes</a> like text, instead of CSS selectors that can change frequently.</li>



<li>Support for <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-api-testing" target="_blank">API Testing</a>, to do things in your e2e test like set up data or assert things like response code = 200.</li>



<li>Stub and mock network requests with&nbsp;<a href="https://playwright.dev/docs/network">network interception</a>.</li>



<li>Actions have <a rel="noreferrer noopener" href="https://playwright.dev/docs/actionability" target="_blank">auto-waiting built-in</a>, so you don’t need to rely on hard-coded sleep commands that can cause flakiness and slow down tests. Also has <a rel="noreferrer noopener" href="https://playwright.dev/docs/navigations#custom-wait" target="_blank">custom waits</a> such as until an element is visible, or until a pop-up is loaded.</li>



<li>Support for recording user actions as Playwright test code aka <a rel="noreferrer noopener" href="https://playwright.dev/docs/codegen" target="_blank">Test Generator</a>, that can be run via CLI or the <a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright#record-new-tests" target="_blank">record button in VS Code</a>.</li>



<li>Supports device-specific events like <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator#locator-hover" target="_blank">hovering with mouse</a>, <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator#locator-tap" target="_blank">tapping on mobile</a>, and <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator#locator-press" target="_blank">keyboard shortcuts</a>.</li>



<li><a rel="noreferrer noopener" href="https://playwright.dev/docs/input#upload-files" target="_blank">Upload</a> and <a rel="noreferrer noopener" href="https://playwright.dev/docs/downloads" target="_blank">download</a> files supported out of the box.</li>



<li>The <a rel="noreferrer noopener" href="/blog/2022/create-more-reliable-playwright-tests-with-locators/" target="_blank">magic of Locators</a> eliminates flakiness caused by dynamic controls.</li>



<li>Playwright Test uses the same Expect assertion library as Jest which will be familiar to many JS devs.</li>



<li>Supports <a href="https://playwright.dev/docs/test-annotations#tag-tests">tagging of tests</a> so you can run groups of related tests e.g. `@priority=high`, `@duration=short`.</li>



<li>Provides <a rel="noreferrer noopener" href="https://playwright.dev/docs/docker" target="_blank">docker images</a> that have dependencies and browsers baked in. This makes <a rel="noreferrer noopener" href="https://playwright.dev/docs/ci" target="_blank">CI configuration</a> simple and fast.</li>
</ol>



<p>Did I miss anything? Post your thoughts in the comments&#8230;</p>



<p>Happy testing!</p>



<p><strong>EDIT</strong>: I wanted to add a comment from a former colleague (<a rel="noreferrer noopener" href="https://www.linkedin.com/in/adam-bjerstedt-45536835/" target="_blank">Adam Bjerstedt</a>), with his list of Playwright favorites, in comparison to Selenium:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p><br>1.) Playwright treats locators as a first-class citizen and eliminates stale elements. Selenium finds the pointer to the DOM element and then passes that around; whereas Playwright passes the locator to the action/assertion.<br>2.) Playwright has baked in implicit waits without the problems that Selenium has for negative tests.<br>3.) Playwright allows super powerful frame handling.<br>4.) Playwright has built-in mocking which allows you to write minified e2e tests at the component level (you don&#8217;t even need to use the component testing aspect).<br>5.) Playwright is so fast that we have to manually handle race conditions at times.<br>6.) Playwright supports powerful pseudo-CSS selectors that replace the only use cases for xpath (searching by text and traversing up the DOM). Xpath leads to many terrible habits and should be avoided.<br>7.) Playwright supports automation IDs as a first-class citizen. (Granted I still use them as data attributes so that I can write compound selectors).</p>
</blockquote>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2022/25-reasons-to-choose-playwright-as-your-next-web-testing-framework/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Create resilient 🎭 Playwright e2e tests with locators</title>
		<link>/blog/2022/create-more-reliable-playwright-tests-with-locators/</link>
					<comments>/blog/2022/create-more-reliable-playwright-tests-with-locators/#respond</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Sun, 09 Jan 2022 19:36:48 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1065</guid>

					<description><![CDATA[Modern web apps introduce some testing challenges — dynamic controls can cause flakiness and unexpected behaviors. This is where the magic of the Playwright locator API can help us build more resilient tests. Why use locators? The locator API was introduced in the 1.14 release and the docs describe it as: Locator represents a view &#8230; <a href="/blog/2022/create-more-reliable-playwright-tests-with-locators/" class="more-link">Continue reading <span class="screen-reader-text">Create resilient 🎭 Playwright e2e tests with locators</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Modern web apps introduce some testing challenges — dynamic controls can cause flakiness and unexpected behaviors. This is where the magic of the Playwright <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-locator" data-type="URL" data-id="https://playwright.dev/docs/api/class-locator" target="_blank">locator API</a> can help us build more resilient tests. </p>



<span id="more-1065"></span>



<h2 class="wp-block-heading">Why use locators?</h2>



<p>The locator API was introduced in the <a rel="noreferrer noopener" href="https://playwright.dev/docs/release-notes#-new-locators-api" target="_blank">1.14 release</a> and the docs describe it as:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>Locator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.</p><cite>https://playwright.dev/docs/api/class-locator</cite></blockquote>



<p>This means we can create smarter selectors to mitigate flaky tests. Part of the smarter logic is strictness. Operations on the target DOM element will throw if more than one element matches the given selector. <br>e.g.</p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">// Throws if there are several buttons in DOM
await page.locator('button').click();</code></pre>



<p>This results in 3 outcomes when using locators:</p>



<ul class="wp-block-list"><li>Test works as expected</li><li>Selector does not match anything and test fails</li><li>Multiple elements match the selector (e.g. there is a second &#8220;button&#8221; added to the page somewhere), and test fails with helpful error message</li></ul>



<p>This allows us to be less thoughtful about our selectors because we can rely on the Playwright locator magic to ensure the test is resilient. </p>



<p>It also enables &#8220;black box&#8221; testing. The tests could be authored by looking at a web page, without inspecting the source code, by a user who may not have insight or understanding of the technical details of the DOM, CSS, etc. The <a href="https://playwright.dev/docs/selectors#text-selector" target="_blank" rel="noreferrer noopener">text selector engine</a> in combination with locators makes this possible.</p>



<h2 class="wp-block-heading">How can I use locators?</h2>



<p>One of the most common cases where I&#8217;ve implemented locators is on <a rel="noreferrer noopener" href="https://playwright.dev/docs/api/class-page#page-click" data-type="URL" data-id="https://playwright.dev/docs/api/class-page#page-click" target="_blank">page.click()</a>. <br>Instead of this:</p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">await page.click('text="Login"');</code></pre>



<p>We can use this:</p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">await page.locator('text="Login"').click();</code></pre>



<p>We can also use it with Playwright Test&#8217;s many <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-assertion" target="_blank">web-first assertions</a>, that offer async matchers that wait until the expected condition is met. Again, to help us battle testing the dynamic web. We can also store a locator in a variable and re-use it in combination with other locators, across multiple assertions:<br></p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">const toggle = page.locator('.setting-item-toggle');
await expect(toggle.locator('text=Show original')).not.toBeChecked();
await expect(toggle.locator('text=Compare gzipped')).toBeChecked();
await expect(toggle.locator('text=Prettify markup')).not.toBeChecked();
await expect(toggle.locator('text=Multipass')).not.toBeChecked();</code></pre>



<p>Working with a list? This is where using an assert of <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-assertions#expectlocatortohavecountcount-options" target="_blank">toHaveCount()</a> can be useful. <br>e.g.</p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">// Wait until there are 3 "Buy" nodes in DOM
await expect(page.locator('text=Buy')).toHaveCount(3)</code></pre>



<p>Better yet, we can look for text using <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-assertions#expectlocatortohavetextexpected-options" target="_blank">toHaveText()</a>!<br>e.g.</p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">// Taken from https://github.com/MarcusFelling/Demo.Playwright/blob/main/svgomg/tests/example.spec.ts
test('verify menu items', async ({ page }) =&gt; {
  await expect(page.locator('.menu li')).toHaveText([
    'Open SVG',
    'Paste markup',
    'Demo',
    'Contribute'
  ]);
});</code></pre>



<p>Working with iFrames? The <a rel="noreferrer noopener" href="https://playwright.dev/docs/release-notes#frame-locators" target="_blank">1.17 release</a> introduced FrameLocator, that of course makes sense to use with locator.<br>e.g.</p>



<pre class="wp-block-code"><code lang="typescript" class="language-typescript">// Click submit button inside #my-frame
const locator = page.frameLocator('#my-frame').locator('text=Submit');
await locator.click();</code></pre>



<h2 class="wp-block-heading">I want to see working code!</h2>



<p>Check out this repo that&#8217;s used to demo various testing scenarios with Playwright, using the official test-runner and scripts authored in TypeScript: <a href="https://github.com/MarcusFelling/demo.playwright" target="_blank" rel="noreferrer noopener">https://github.com/MarcusFelling/demo.playwright</a>. The majority of example scripts are leveraging locators.</p>



<p>Happy testing!</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2022/create-more-reliable-playwright-tests-with-locators/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Publishing 🎭 Playwright test results to GitHub Pages</title>
		<link>/blog/2021/publishing-playwright-test-results-to-github-pages/</link>
					<comments>/blog/2021/publishing-playwright-test-results-to-github-pages/#respond</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Mon, 22 Nov 2021 19:49:09 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1044</guid>

					<description><![CDATA[Now that Playwright has a fancy new HTML reporter, I wanted to host test results to show the latest state of my GitHub Action test runs. Adding a step to my pipeline that publishes the results to GitHub Pages made this pretty simple. The Playwright 1.17.0-rc1 release included an update to the HTML reporter to &#8230; <a href="/blog/2021/publishing-playwright-test-results-to-github-pages/" class="more-link">Continue reading <span class="screen-reader-text">Publishing 🎭 Playwright test results to GitHub Pages</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Now that <a rel="noreferrer noopener" href="https://playwright.dev/" data-type="URL" data-id="https://playwright.dev/" target="_blank">Playwright </a>has a fancy new <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-reporters/#html-reporter" target="_blank">HTML reporter</a>, I wanted to host test results to show the latest state of my GitHub Action test runs. Adding a step to my pipeline that publishes the results to GitHub Pages made this pretty simple. </p>



<span id="more-1044"></span>



<p>The Playwright <a rel="noreferrer noopener" href="https://github.com/microsoft/playwright/releases/tag/v1.17.0-rc1" data-type="URL" data-id="https://github.com/microsoft/playwright/releases/tag/v1.17.0-rc1" target="_blank">1.17.0-rc1 release</a> included an update to the HTML reporter to produce a single static HTML file. This makes it easy to share test results with others, via email, chat, or host it somewhere. A natural fit for me, was to host it on GitHub Pages, in the same repo as my tests.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.&nbsp;</p><cite><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">About GitHub Pages &#8211; GitHub Docs</a></cite></blockquote>



<h2 class="wp-block-heading">Enable GitHub Pages in your GitHub repository</h2>



<p>GitHub has docs on this here: <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer noopener">https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site</a></p>



<p>I chose to go with most of the defaults. The content lives in a separate branch <code>gh-pages</code> at the root. I chose to set up a custom domain at <a rel="noreferrer noopener" href="https://testresults.marcusfelling.com/" data-type="URL" data-id="https://testresults.marcusfelling.com/" target="_blank">testresults.marcusfelling.com</a>. This is what my configuration looks like:</p>



<figure class="wp-block-image size-large"><a href="/content/uploads/2021/11/github-pages-configuration.png"><img loading="lazy" decoding="async" width="1024" height="646" src="/content/uploads/2021/11/github-pages-configuration-1024x646.png" alt="" class="wp-image-1049" srcset="/content/uploads/2021/11/github-pages-configuration-1024x646.png 1024w, /content/uploads/2021/11/github-pages-configuration-300x189.png 300w, /content/uploads/2021/11/github-pages-configuration-768x484.png 768w, /content/uploads/2021/11/github-pages-configuration-1536x969.png 1536w, /content/uploads/2021/11/github-pages-configuration-2048x1291.png 2048w, /content/uploads/2021/11/github-pages-configuration-648x409.png 648w, /content/uploads/2021/11/github-pages-configuration-304x192.png 304w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<h2 class="wp-block-heading">Configuring GitHub Actions</h2>



<ol class="wp-block-list"><li>Make sure you&#8217;re using Playwright <a rel="noreferrer noopener" href="https://github.com/microsoft/playwright/releases/tag/v1.17.0-rc1" data-type="URL" data-id="https://github.com/microsoft/playwright/releases/tag/v1.17.0-rc1" target="_blank">1.17.0-rc1 </a>or later</li><li>Use the <a rel="noreferrer noopener" href="https://playwright.dev/docs/test-reporters/#html-reporter" data-type="URL" data-id="https://playwright.dev/docs/test-reporters/#html-reporter" target="_blank">HTML reporter</a> when running tests <br>e.g.<br><code>npx playwright test --reporter=html</code><br>Note: the index.html file will be output to a folder called <code>playwright-report</code></li><li>Use the <a href="https://github.com/marketplace/actions/github-pages-action" data-type="URL" data-id="https://github.com/marketplace/actions/github-pages-action" target="_blank" rel="noreferrer noopener">peaceiris/actions-gh-pages</a> GitHub Action to publish index.html to GitHub Pages</li></ol>



<script src="https://gist.github.com/MarcusFelling/3219b99dc64937bedc4eda30e291a900.js"></script>



<p>I left comments in the above snippet to explain what each property does. </p>



<h2 class="wp-block-heading">Working example</h2>



<p>You can find a working example of this in my demo.playwright repo: <a rel="noreferrer noopener" href="https://github.com/MarcusFelling/demo.playwright" target="_blank">https://github.com/MarcusFelling/demo.playwright</a></p>



<p>Happy testing!</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2021/publishing-playwright-test-results-to-github-pages/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>💪 Azure Bicep CI/CD 🚀</title>
		<link>/blog/2021/azure-bicep-ci-cd/</link>
					<comments>/blog/2021/azure-bicep-ci-cd/#comments</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Sun, 11 Jul 2021 22:32:36 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1007</guid>

					<description><![CDATA[Hey, you. You&#8217;re not manually deploying your Azure Bicep Infrastructure as Code, are you?!? Let&#8217;s prevent that next production outage, help your team collaborate on changes, and enable more frequent deployments. In this post, I&#8217;ll outline what tooling is available to integrate Bicep in your pipelines, and some good practices for building and deploying. Resources &#8230; <a href="/blog/2021/azure-bicep-ci-cd/" class="more-link">Continue reading <span class="screen-reader-text">💪 Azure Bicep CI/CD 🚀</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Hey, you. You&#8217;re not manually deploying your <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview" target="_blank">Azure Bicep</a> Infrastructure as Code, are you?!? Let&#8217;s prevent that next production outage, help your team collaborate on changes, and enable more frequent deployments. In this post, I&#8217;ll outline what tooling is available to integrate Bicep in your pipelines, and some good practices for building and deploying.</p>



<span id="more-1007"></span>



<h2 class="wp-block-heading">Resources to get started</h2>



<p>If you&#8217;re new to Azure Bicep, I&#8217;d recommend checking out the <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/learn/paths/bicep-deploy/" target="_blank">Microsoft Learn learning path for Bicep</a>. There are also great resources for the basics on <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/deploy-github-actions" target="_blank">Deploying Bicep files by using GitHub Actions</a> and<a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/add-template-to-azure-pipelines" target="_blank"> Integrating Bicep with Azure Pipelines</a>. Once you have the fundamentals covered, you may find the remainder of this post helpful.</p>



<h1 class="wp-block-heading">Build </h1>



<h3 class="wp-block-heading">Tooling</h3>



<p>I&#8217;m going to break things down into 2 phases of the pipeline: 1. build 2. deploy. For the build phase, we have multiple options for tooling:</p>



<ul class="wp-block-list"><li><strong>Bicep CLI</strong> – now included in Azure Pipelines <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;tabs=yaml" target="_blank">Microsoft-hosted agents</a> and GitHub Actions <a rel="noreferrer noopener" href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners" target="_blank">hosted runners</a>. You can also add script steps to install on self-hosted agents <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/install#install-manually" target="_blank">based on OS</a>.</li><li><strong>Azure CLI</strong> – Bicep is now included in v2.20.0 or later. Installing Bicep is as simple as running <code>az bicep install</code></li><li><a href="https://github.com/marketplace/actions/bicep-build"><strong>Bicep GitHub Action</strong></a> &#8211; Action built and maintained by a community member.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=piraces.bicep-tasks"><strong>Bicep extension for Azure Pipelines</strong></a> &#8211; Set of Azure Pipeline tasks built and maintained by a community member.</li></ul>



<h3 class="wp-block-heading">Good Practices</h3>



<p>I like to set up the build phase early in my pipeline, in order to fail fast and speed up the feedback loop. The build should make sure 3 things happen:</p>



<ul class="wp-block-list"><li>Ensure transpilation (conversion to ARM template) is successful.</li><li>Ensure linting rules pass. Configure <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/linter#customize-linter" target="_blank">bicepconfig.json</a> to throw an error on important rule violations. </li><li>Ensure preflight validaton is successful.</li></ul>



<p>To combine all of the above using a single command, validation commands can be used. For a resource group deployment, I can use the Azure CLI command <code><a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/cli/azure/deployment/group?view=azure-cli-latest#az_deployment_group_validate" target="_blank">az deployment group validate</a></code> or Azure PowerShell&#8217;s <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/powershell/module/az.resources/test-azresourcegroupdeployment" target="_blank">Test-AzResourceGroupDeployment</a>.</p>



<p>For an example of this using GitHub Actions, check out my SpaceGameVNext&#8217;s pipeline <a href="https://github.com/MarcusFelling/demo-space-game-vnext/blob/12b081894b10b581bdfeaedfce69a0f5165891b3/.github/workflows/pipeline.yml#L83">here</a>.</p>



<figure class="wp-block-image size-large"><a href="/content/uploads/2021/07/buildBicepValidatePipeline.png"><img loading="lazy" decoding="async" width="1024" height="623" src="/content/uploads/2021/07/buildBicepValidatePipeline-1024x623.png" alt="" class="wp-image-1015" srcset="/content/uploads/2021/07/buildBicepValidatePipeline-1024x623.png 1024w, /content/uploads/2021/07/buildBicepValidatePipeline-300x182.png 300w, /content/uploads/2021/07/buildBicepValidatePipeline-768x467.png 768w, /content/uploads/2021/07/buildBicepValidatePipeline-1536x934.png 1536w, /content/uploads/2021/07/buildBicepValidatePipeline-2048x1245.png 2048w, /content/uploads/2021/07/buildBicepValidatePipeline-648x394.png 648w, /content/uploads/2021/07/buildBicepValidatePipeline-316x192.png 316w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<h1 class="wp-block-heading">Deploy</h1>



<h3 class="wp-block-heading">Tooling</h3>



<p>Similar to build, we have multiple options for deployment:</p>



<ul class="wp-block-list"><li><strong>Azure CLI</strong> – no install needed v2.20.0 or later. I can issue a deployment command pointed at a Bicep template and Bicep will be downloaded and installed on the fly, behind the scenes.</li><li><strong>Azure PowerShell </strong>– Unfortunately Azure PowerShell doesn&#8217;t automatically install the Bicep CLI. Instead, you must&nbsp;<a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/install#install-manually">manually install the Bicep CLI</a>.</li><li><a rel="noreferrer noopener" href="https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template" target="_blank"><strong>Deploy Azure Resource Manager (ARM) Template GitHub Action</strong></a> &#8211; Action built and maintained by Microsoft Azure. Now supports Bicep. </li><li><a rel="noreferrer noopener" href="https://github.com/microsoft/azure-pipelines-tasks/tree/master/Tasks/AzureResourceManagerTemplateDeploymentV3" target="_blank"><strong>ARM template deployment Azure Pipeline task</strong></a> &#8211; Official Azure Pipeline task. No native Bicep support. Requires referencing transpiled ARM Template.</li></ul>



<h3 class="wp-block-heading">Good Practices</h3>



<p>I like to promote the same set of templates for all environments (dev -&gt; test -&gt; prod). This encourages the <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank">DRY</a> (Don&#8217;t repeat yourself) principle.  In order to make this happen, I can:</p>



<ul class="wp-block-list"><li>Use <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/conditional-resource-deployment" target="_blank">conditions</a> on resources that may differ. For example, if I only want to <a rel="noreferrer noopener" href="https://github.com/MarcusFelling/Demo.SpaceGamevNext/blob/12b081894b10b581bdfeaedfce69a0f5165891b3/IaC/webapp.bicep#L96" target="_blank">use deployment slots in production</a>.</li><li>Use <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/operators-logical" target="_blank">ternary expressions</a> on properties that differ. For example, if I want to <a rel="noreferrer noopener" href="https://github.com/Azure/bicep/blob/main/docs/tutorial/03-using-expressions.md#using-the-ternary-operator" target="_blank">use different storage account SKU&#8217;s</a>.</li><li>Leverage pipeline environment variables to re-use same steps for each environment.</li></ul>



<p>Additionally,</p>



<ul class="wp-block-list"><li>Do not store secret values in templates. If you use Key Vault, check out <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/key-vault-parameter?tabs=azure-cli" target="_blank">Use Azure Key Vault to pass secure parameter value during Bicep deployment</a>.</li><li><a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/learn/modules/arm-template-whatif/" target="_blank">Use what-if to preview changes</a>. This is a great way to review the impact your changes will have via dry-run. </li><li>Cleanup dev/test environment resources when no longer needed. I like to have a separate pipeline that get&#8217;s triggered on the merge of PR, that destroy&#8217;s resources that were created for the sole purpose of testing that PR&#8217;s change.</li></ul>



<p>For an example of this using GitHub Actions, check out my SpaceGameVNext&#8217;s pipeline <a href="https://github.com/MarcusFelling/demo-space-game-vnext/blob/main/.github/workflows/pipeline.yml">here</a>.</p>



<figure class="wp-block-image size-large"><a href="/content/uploads/2021/07/githubactionspipelinebicepazure.png"><img loading="lazy" decoding="async" width="1024" height="123" src="/content/uploads/2021/07/githubactionspipelinebicepazure-1024x123.png" alt="" class="wp-image-1016" srcset="/content/uploads/2021/07/githubactionspipelinebicepazure-1024x123.png 1024w, /content/uploads/2021/07/githubactionspipelinebicepazure-300x36.png 300w, /content/uploads/2021/07/githubactionspipelinebicepazure-768x93.png 768w, /content/uploads/2021/07/githubactionspipelinebicepazure-1536x185.png 1536w, /content/uploads/2021/07/githubactionspipelinebicepazure-2048x247.png 2048w, /content/uploads/2021/07/githubactionspipelinebicepazure-648x78.png 648w, /content/uploads/2021/07/githubactionspipelinebicepazure-583x70.png 583w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<h2 class="wp-block-heading">Summary</h2>



<p>None of this is hard and fast guidance to follow strictly. There are many different types of architectures, environments, repository structures, etc. These are things that I&#8217;ve found success with and YMMV. What have you found success in while integrating Bicep into your pipelines? I would love to hear your thoughts in the comments.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2021/azure-bicep-ci-cd/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Using Terraform&#8217;s Azure provider (azurerm) with GitHub Actions and Terraform Cloud</title>
		<link>/blog/2021/using-terraforms-azure-provider-azurerm-with-github-actions-and-terraform-cloud/</link>
					<comments>/blog/2021/using-terraforms-azure-provider-azurerm-with-github-actions-and-terraform-cloud/#comments</comments>
		
		<dc:creator><![CDATA[Marcus]]></dc:creator>
		<pubDate>Sat, 06 Feb 2021 18:38:44 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=969</guid>

					<description><![CDATA[I wanted to document this after spending a frustrating amount of time troubleshooting getting this setup. I was getting this error when running Terraform Plan: Error building AzureRM Client: obtain subscription() from Azure CLI: Error parsing json result from the Azure CLI: Error waiting for the Azure CLI: exit status 1: ERROR: Please run 'az &#8230; <a href="/blog/2021/using-terraforms-azure-provider-azurerm-with-github-actions-and-terraform-cloud/" class="more-link">Continue reading <span class="screen-reader-text">Using Terraform&#8217;s Azure provider (azurerm) with GitHub Actions and Terraform Cloud</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I wanted to document this after spending a frustrating amount of time troubleshooting getting this setup. I was getting this error when running Terraform Plan: </p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p><code>Error building AzureRM Client: obtain subscription() from Azure CLI: Error parsing json result from the Azure CLI: Error waiting for the Azure CLI: exit status 1: ERROR: Please run 'az login' to setup account.</code></p></blockquote>



<span id="more-969"></span>



<p>I followed the well-documented instructions for <a rel="noreferrer noopener" href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret" target="_blank">Authenticating to Azure using a Service Principal and a Client Secret</a>. I stored the 4 values for ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID, and ARM_TENANT_ID as <a rel="noreferrer noopener" href="https://docs.github.com/en/actions/reference/encrypted-secrets" target="_blank">GitHub encrypted secrets</a>, then set them as environment variables in my GitHub Actions workflow: </p>



<script src="https://gist.github.com/MarcusFelling/55950d58da2b4a83f061cdaa52f37061.js"></script>



<p>The Azure provider has these <a rel="noreferrer noopener" href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#argument-reference" target="_blank">documented </a>and states the arguments for client_id, client_secret, subcription_id, and tenant_id can be sourced from these environment variables.</p>



<p>For some reason, the Terraform Plan command was not picking them up and kept throwing the error mentioned above <code>"Error building AzureRM Client: obtain subscription() from Azure CLI: Error parsing json result from the Azure CLI: Error waiting for the Azure CLI: exit status 1: ERROR: Please run 'az login' to setup account.</code>&#8220;</p>



<p>I re-generated the service principal, re-added the values to the GitHub Secrets, tried setting the values for the service principal in the provider block, all to no avail. I finally discovered that Terraform Cloud workspaces have a default execution mode of &#8220;Remote&#8221;, meaning plans and applies occur on Terraform Cloud&#8217;s infrastructure. Because of this, the Plan command could not pick up the environment variables from the GitHub Action. Switching the workspace to local resolved my issue (workspace -&gt; settings -&gt; General):</p>



<figure class="wp-block-image size-large"><a href="/content/uploads/2021/02/image.png"><img loading="lazy" decoding="async" width="1024" height="252" src="/content/uploads/2021/02/image-1024x252.png" alt="" class="wp-image-970" srcset="/content/uploads/2021/02/image-1024x252.png 1024w, /content/uploads/2021/02/image-300x74.png 300w, /content/uploads/2021/02/image-768x189.png 768w, /content/uploads/2021/02/image-1536x378.png 1536w, /content/uploads/2021/02/image-2048x504.png 2048w, /content/uploads/2021/02/image-648x159.png 648w, /content/uploads/2021/02/image-583x143.png 583w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>This is what the complete GitHub Action looks like:</p>



<script src="https://gist.github.com/MarcusFelling/de04b04ab801b3fb22f0992a3ab79533.js"></script>



<p>I hope this post will help others who were desperately weeding through search results like I was.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/2021/using-terraforms-azure-provider-azurerm-with-github-actions-and-terraform-cloud/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
	</channel>
</rss>
